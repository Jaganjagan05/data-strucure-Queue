Implement a Stack using two queues q1 and q2.

Example 1:

Input:
push(2)
push(3)
pop()
push(4)
pop()
Output: 3 4
Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   popped element will be 3 the 
        stack will be {2}
push(4) the stack will be {2 4}
pop()   popped element will be 4  
Example 2:

Input:
push(2)
pop()
pop()
push(3)
Output: 2 -1
Your Task:

Since this is a function problem, you don't need to take inputs. You are required to complete the two methods push() which takes an integer 'x' as input denoting the element to be pushed into the stack and pop() which returns the integer poped out from the stack(-1 if the stack is empty).

Constraints:
1 <= Number of queries <= 100
1 <= values of the stack <= 100

class Queues {
    Queue<Integer> q1 = new LinkedList<>();
    Queue<Integer> q2 = new LinkedList<>();
    void push(int a) {
        q1.offer(a); 
    }

   
    int pop() {
        if (q1.isEmpty()) {
            return -1; 
        }

        while (q1.size() > 1) {
            q2.offer(q1.poll());
        }

        int topElement = q1.poll();

        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;

        return topElement;
    }
}
